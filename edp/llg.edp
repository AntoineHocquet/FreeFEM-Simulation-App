// Schema projete pour SLLG ,domaine=disque unite, dimension 2, etude de solutions explosives.
// Pour faire tourner ce programme, il faut au prealable avoir execute "initsllg.edp"
real T=0.05;real dt=0.001;int N=floor(T/dt); // parametres de temps
real theta=0.5; // parametre du schema
real adapt=1; real erreur=0.145; // adaptation du maillage
real[int] E(N); // tableau de l'Energie
real alpha=1;real beta=0; // parametre de damping et precession
real epsilon=0.5;real reg=-0.1;real nu=sqrt(epsilon*dt); // amplitude du bruit
randinit(1313*clock());
int Niter0;real Titer0;
{ifstream gggg("./iter.txt");gggg>>Niter0>>Titer0;}
{ofstream data1("parameters_u.txt");data1<<T<<endl<<N<<endl<<epsilon;}
int Niter1=Niter0+N;real Titer1=Titer0+T;
// macros
macro u [u0,u1,u2]//
macro phi [phi0,phi1,phi2]//
macro v [v0,v1,v2]//
macro grad(a) [dx(a[0]),dy(a[0]),dx(a[1]),dy(a[1]),dx(a[2]),dy(a[2])]//
macro R(a) [[0,-a[2],a[1]],[a[2],0,-a[0]],[-a[1],a[0],0]]// matrice de v-->a X v
macro rho(a) [[1,a[2],-a[1]],[-a[2],1,a[0]],[a[1],-a[0],1]]// matrice de rotation (I3-u^n X)
macro dw [dw0,dw1,dw2]//
macro uorth [u2*u0/sqrt(u0^2+u1^2), u2*u1/sqrt(u0^2+u1^2), sqrt(u0^2+u1^2)]// u x e_O

// maillage
mesh Th=readmesh("./u/mesh_u.msh");fespace Vh(Th,P1);
Vh u0,u1,u2,phi0,phi1,phi2,v0,v1,v2,lambda,mu,dw0,dw1,dw2,diag;
// Donnee initiale
cout<<Th.nv<<endl;
real[int] u00(Th.nv),u01(Th.nv),u02(Th.nv);
	{ifstream c("./u/U0.txt"),cc("./u/U1.txt"),ccc("./u/U2.txt");
	c>>u00;cc>>u01;ccc>>u02;}
	u0[]=u00;u1[]=u01;u2[]=u02;
// definition du pv
problem sllg([v0,v1,v2,lambda],[phi0,phi1,phi2,mu])=int2d(Th)(alpha*v'*phi)
			+ int2d(Th)(beta*v'*R(u)'*phi) // Terme gyromagnetique
			+ int2d(Th)((1+alpha^2)*theta*dt*grad(v)'*grad(phi))
			+ int2d(Th)((1+alpha^2)*dt*grad(u)'*grad(phi))
			+ int2d(Th,qft=qf1pTlump)(lambda*phi'*u)
			+ int2d(Th,qft=qf1pTlump)(mu*v'*u)
			//+ int2d(Th)(dw'*rho(u)'*phi)   //terme de bruit
			+ int2d(Th)(dw0*uorth'*phi)   //terme de bruit
			+on(1,v0=0,v1=0,v2=0) //conditions de Dirichlet sur v
;
// boucle en temps t=n*dt
for(int n=Niter0;n<Niter1;n++){
      cout<<"t = "<<n*dt<<"\n Niter = "<<Niter0+n<<endl;
      plot(u2,dim=3,nbiso=60);
      E[n-Niter0]=int2d(Th)(dx(u0)^2+dy(u0)^2+dx(u1)^2+dy(u1)^2+dx(u2)^2+dy(u2)^2);
	
      { ofstream tout("./u/valU/u_"+n+".txt");
      for (int k=0;k<Th.nt;k++)
	{ for (int j=0; j <3; j++){tout<<Th[k][j].x << " "<< Th[k][j].y<< " "<<0
	  <<" "<<u0[][Vh(k,j)]<<" "<<u1[][Vh(k,j)]<<" "<<u2[][Vh(k,j)]
	  <<" "<<E[n-Niter0]<<endl;}
	}
	}
// recuperation du bruit Gaussien "dw"
if (epsilon>0) {Vh s0,s1,s2;
varf mass(phi0,phi1)=int2d(Th)(phi0*phi1);matrix M=mass(Vh,Vh);
real[int] D(M.n);
D=M.diag;Vh diag=0;diag[]=D;dw0=0;dw1=0;dw2=0;
problem P([dw0,dw1,dw2],[s0,s1,s2])=int2d(Th)(sqrt(diag)*(dw0*s0+dw1*s1+dw2*s2),qft=qf1pTlump,optimize=0)
		  +int2d(Th,qft=qf1pTlump,optimize=0)(nu*(log(randreal1())*cos(2*pi*randreal1()))*s0
		  +nu*(log(randreal1())*cos(2*pi*randreal1()))*s1
		  +nu*(log(randreal1())*cos(2*pi*randreal1()))*s2);
P;
}
// execution
sllg;
// adaptation du maillage
if (adapt) {Th=adaptmesh(Th,u2,err=erreur);}
// etape de renormalisation
  Vh NN=sqrt((u0+v0)^2+(u1+v1)^2+(u2+v2)^2);
  Vh uu0=(u0+v0)/NN, uu1=(u1+v1)/NN, uu2=(u2+v2)/NN;
  u0=uu0;u1=uu1;u2=uu2;
}

savemesh(Th,"./u/mesh_u.msh");
{ofstream g("./u/U0.txt"),gg("./u/U1.txt"),ggg("./u/U2.txt");
g<<u0[];gg<<u1[];ggg<<u2[];}
{ofstream data1("parameters_u.txt");
  data1<<T<<endl<<N;}
{ofstream data2("iter.txt");
  data2<<Niter1<<endl<<Titer1;}
// affichage des parametres  
cout <<"\n\n\n"<<"Parametres de temps: "<<"T final = "<<Titer1<<", dt = "<<dt<<", N = "<<N
<<"\n\n"<<"Parametres du bruit: "<<"epsilon = "<<epsilon<<", nu = "<<nu<<"\n\n\n"<<endl;